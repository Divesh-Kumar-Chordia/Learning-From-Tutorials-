Day 1
 
 Type script 
    let name : type 
    let name = value
    let name : type = value 

  to run 
     tsc index.ts
     node index.js
  better 
      tsc --init 
      "rootDir" : "/src" , "outDir" : "/dist"  = > in tsc.config file 
      now still everytime you will need to run 
        tsc 
          to update changes . ( IT CREATES a javascript file in dist folder . if you place ts file in src folder . ) 
        so run 
          tsc --watch 
          node index.js

          ( nodemon version of typerscript ... _ ) 

         NOTE IT IS TWO TERMINAL THING : 
             add a terminal for node index.js  ( or ) node --watch dist/index.js
               while other runs tsc --watch 

          node --watch dist/index.js     ( node js handles it and you dont need to keep writing node index.js

          
//// writing functions : 
 const fun  = ( a:number ,b: number) : number =>{
   return a + b; 
}

function dd( a: number , b:number ) : number {
  return a+b;
}
function ddddd( a : number[] ) {
 console.log( a[0]);
}
??void - no need to write (it assigns it on its own ) = > void function (here); 
// any type 
let a : any 
let a 
both are correct 

//tupple

let person : [ string , boolean , number ] = [ "divesh" , "false " , 11] 

here the order and type -  > is given . -> tupple 

//example : 
function useCoords():[number,number] {
// get coords
const lat = 100
const long = 50
return [lat, long]
}
const [lat, long] = useCoords();


//named tupple : 
 let user = [ age: number , name : string ] 

it gives people a feedback .. 
Good Practice. 

//interface 

interface Author {
name: string,
avatar: string
}

const authorOne: Author = {name: 'mario' , avatar: '/img/mario.png'}


//type -object 

type User = {
name: string
score: number
}
const userOne: User ={ name: 'mario' , score: 75 }


//union type : 

let user : string | null 

so it can be string or it can be null ; 

problem is 

on using it in funciton = > return type would have number | string  etc.. that would led to type miss match = > how would it deciede anyway . SO 
WE CAN ONLY USE THOSE VALUES OF PROPS WHICH ARE COMMON FOR BOTH TYPE /s 
eg : 
type ID : string | number ;
function fun ( id : ID ) : ID {
   //to over come the problem we use type cast 

   1. type guard - they check the types ; ; 
            if( typeof id === "string"){    // only when id is of type string ... }
            if( typeof id === "number") {  // ....}

hence if we dont have any content outside the bifurcations then we can pass indiviual types . 

tagged types ; 

interface User {
type : 'user'
username: string
email: string
ld: ld


interface Person {
type : 'person '
firstname: string
age: number
id: ld
  }

WE HARD CODE THE TYPE INSIDE THE INTERFACE ; 
then we can use guard : 

   if ( value.type === "user"){

   ///etc . 









